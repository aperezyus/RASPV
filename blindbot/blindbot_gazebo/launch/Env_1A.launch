<launch>

  <!-- Choose model (asus, intel). Asus camera recommended (faster) -->
  <arg name="model" default="blind_asus" doc="model type ([blind_asus,blind_intel])"/>

  <!-- Choose the coordinates where does the robot starts in the map -->
  <arg name="x_pos" default="-6.0"/>
  <arg name="y_pos" default="3.0"/>
  <arg name="z_pos" default="0.0"/>

  <!-- Load the desired world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find blindbot_gazebo)/worlds/EnvA.world"/> 
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/> <!-- if set to false, no gazebo gui is launched -->
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
    <arg name="verbose" value="false"/>
  </include>

  <!-- Load the robot_description to be spawned -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find blindbot_description)/urdf/$(arg model)_bot.urdf.xacro" />

  <!-- Spawn the robot. Type "rosrun gazebo_ros spawn_model -h" to see all parameters -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model blindbot -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description" />

  <!-- Velocity muxer to move the robot with kobuki_gazebo_plugins -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
      args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find blindbot_teleop)/param/mux.yaml" />
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>

  <!-- Load the joint controllers for the camera joint -->
  <rosparam file="$(find blindbot_description)/config/config.yaml" command="load" />
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/camera_joint_model" args="joint_state_controller kinect_joint_controller1 kinect_joint_controller2 kinect_joint_controller3" />

  <!-- Initialize robot_state_publisher to continuously publish the state of the joint in /tf -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>

  <!-- Initialize joint_state_publisher for the camera_joint -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam param="source_list">["camera_joint_model/joint_states"]</rosparam>
  </node>

  <!-- Launch the groundtruth_node, which continuously publishes to /tf the relative position of the base_footprint to world reference frame -->
  <node pkg="blindbot_gazebo" type="groundtruth_node" name="groundtruth_node">
    <param name="Topic_name" value="/ground_truth/state"/>
    <param name="childFrame_id" value="base_footprint"/>
    <param name="parentFrame_id" value="world"/>
  </node>


  <!--joy_teleop.launch-->

  <arg name="joy_config" default="senze" />
  <arg name="joy_dev" default="/dev/input/js0" />
  <arg name="config_filepath" default="$(find blindbot_teleop)/config/$(arg joy_config).config.yaml" />

  <node pkg="joy" type="joy_node" name="joy_node">
    <param name="dev" value="$(arg joy_dev)" />
    <param name="deadzone" value="0.3" />
    <param name="autorepeat_rate" value="100" />
  </node>

  <node pkg="blindbot_teleop" name="teleop_twist_joy" type="teleop_node">
    <rosparam command="load" file="$(arg config_filepath)" />
  </node>

  <!--  smooths inputs from cmd_vel_mux/input/teleop_raw to cmd_vel_mux/input/teleop -->
  <include file="$(find blindbot_teleop)/launch/includes/velocity_smoother.launch.xml"/>



  <!--SPV_lite.launch-->

  <arg name="SPV_model" default="default" doc="SPV model type [default, argus, rgbd, camera]"/>

  <arg name="USE_MODE_RGBD" default="true"/>
  <arg name="USE_MODE_GAZEBO" default="true"/>
  <arg name="USE_MODE_SLAM" default="false"/>
  <arg name="USE_MODE_STAIR" default="false"/>
  <arg name="USE_MODE_NAVIGATION" default="false"/>
  <arg name="USE_MODE_DOOR" default="false"/>


  <arg name="USE_CAMERA_FROM_TOPIC" default="true"/>
  <arg name="USE_SPV_FROM_CAMERA" default="false"/>
  <arg name="SET_SAVE_IMG_PATH" default="/home/USER/Pictures/SPV/"/>

  <node pkg="raspv" type="SPV" name="SPV_node" output="screen">

    <param name="door_center_x" type="double" value="-2.0"/>
    <param name="door_center_y" type="double" value="0.0"/>
    <param name="door_yaw" type="double" value="1.5708"/>
    <param name="door_width" type="double" value="2.2"/>
    <param name="door_height" type="double" value="2.1"/>

    <param name="goal_x" type="double" value="8.4"/>
    <param name="goal_y" type="double" value="1.4"/>
    <param name="goal_yaw" type="double" value="0.0"/>
    <param name="goal_width" type="double" value="0.7"/>
    <param name="goal_height" type="double" value="0.9"/>

    <param name="MODE_DOOR_FIRST" type="bool" value="true"/>


    <param name="MODE_RGBD" type="bool" value="$(arg USE_MODE_RGBD)"/>
    <param name="MODE_GAZEBO" type="bool" value="$(arg USE_MODE_GAZEBO)"/>
    <param name="MODE_SLAM" type="bool" value="$(arg USE_MODE_SLAM)"/>
    <param name="MODE_STAIR" type="bool" value="$(arg USE_MODE_STAIR)"/>
    <param name="MODE_NAVIGATION" type="bool" value="$(arg USE_MODE_NAVIGATION)"/>
    <param name="MODE_DOOR" type="bool" value="$(arg USE_MODE_DOOR)"/>

    <param name="CAMERA_FROM_TOPIC" type="bool" value="$(arg USE_CAMERA_FROM_TOPIC)"/>
    <param name="SPV_FROM_CAMERA" type="bool" value="$(arg USE_SPV_FROM_CAMERA)" />
    <param name="SAVE_IMG_PATH" type="string" value="$(arg SET_SAVE_IMG_PATH)" />

    <rosparam file="$(find raspv)/config/devices/$(arg SPV_model).yaml" command="load" />
    <rosparam file="$(find raspv)/config/display.yaml" command="load" />
    <rosparam file="$(find raspv)/config/representation.yaml" command="load" />
    <rosparam file="$(find raspv)/config/default_camera.yaml" command="load" />
  </node>


  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find raspv)/rviz/SPV_Gazebo.rviz" />

  <!-- amcl_gazebo.launch -->
  <!-- 3D sensor -->
  <arg name="3d_sensor" default="asus_xtion_pro"/>  <!-- r200, kinect, asus_xtion_pro -->
  <!-- include file="$(find turtlebot_bringup)/launch/3dsensor.launch">
    <arg name="rgb_processing" value="false" />
    <arg name="depth_registration" value="false" />
    <arg name="depth_processing" value="false" /-->

    <!-- We must specify an absolute topic name because if not it will be prefixed by "$(arg camera)".
         Probably is a bug in the nodelet manager: https://github.com/ros/nodelet_core/issues/7 -->
    <!--arg name="scan_topic" value="/camera/scan" />
  </include -->

  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
     <remap from="cloud_in" to="/camera/depth_registered/points"/>
     <remap from="scan" to="/camera/scan"/>
     <rosparam>
       target_frame: base_footprint #Leave disabled to output scan in pointcloud frame
       transform_tolerance: 0.01
       min_height: 0.3
       max_height: 1.7

       angle_min: -1.5708 # -M_PI/2
       angle_max: 1.5708 # M_PI/2
       angle_increment: 0.0087 # M_PI/360.0
       scan_time: 0.3333
       range_min: 0.45
       range_max: 8.0
       use_inf: true
       inf_epsilon: 1.0

       # Concurrency level, affects number of pointclouds queued for processing, thread number governed by nodelet manager
       # 0 : Detect number of cores
       # 1 : Single threaded
       # 2->inf : Parallelism level
       concurrency_level: 0
     </rosparam>
   </node>


  <!-- Map server -->
  <arg name="map_file" default="$(find navigation)/maps/EnvA.yaml"/> 
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

  <!-- AMCL -->
  <!--arg name="custom_amcl_launch_file" default="$(find navigation)/launch/includes/amcl/$(arg 3d_sensor)_amcl.launch.xml"/>
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>
  <arg name="scan_topic" default="/camera/scan"/>
  <include file="$(arg custom_amcl_launch_file)">
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include-->
  <node pkg="tf" type="static_transform_publisher" name="map_pub" args="0 0 0 0 0 0   /map /world  100"/>

  <!-- Move base -->
  <arg name="custom_param_file" default="$(find navigation)/param/dummy.yaml"/>
  <include file="$(find navigation)/launch/includes/move_base_gazebo.launch.xml">
    <arg name="custom_param_file" value="$(arg custom_param_file)"/>
  </include>

   <!-- Include rviz navigation launch -->
   <!--include file="$(find turtlebot_rviz_launchers)/launch/view_navigation.launch"/-->

<!--node name="goal" pkg="rostopic" type="rostopic"
    args="pub goal geometry_msgs/PoseStamped
   '{header: {seq: auto, stamp: now, frame_id: 'map'},
    pose: {position: {x: 6.0, y: 0.0, z: 0.0}, orientation: {x: 0.0, y: 0.0, z: -0.70482373086, w: 0.709382483867}}}' -r 1">
 <remap from="goal" to="move_base_simple/goal"/>
</node-->





</launch>
