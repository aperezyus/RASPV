<launch>
  <!-- 3D sensor -->
  <arg name="3d_sensor" default="asus_xtion_pro"/>  <!-- r200, kinect, asus_xtion_pro -->
  <!--include file="$(find turtlebot_bringup)/launch/3dsensor.launch">
    <arg name="rgb_processing" value="false" />
    <arg name="depth_registration" value="false" />
    <arg name="depth_processing" value="false" /-->

    <!-- We must specify an absolute topic name because if not it will be prefixed by "$(arg camera)".
         Probably is a bug in the nodelet manager: https://github.com/ros/nodelet_core/issues/7 -->
    <!--arg name="scan_topic" value="/camera/scan" />
  </include-->


  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
     <remap from="cloud_in" to="/camera/depth_registered/points"/>
     <remap from="scan" to="/camera/scan"/>
     <rosparam>
       target_frame: base_footprint #Leave disabled to output scan in pointcloud frame
       transform_tolerance: 0.01
       min_height: 0.3
       max_height: 1.7

       angle_min: -1.5708 # -M_PI/2
       angle_max: 1.5708 # M_PI/2
       angle_increment: 0.0087 # M_PI/360.0
       scan_time: 0.3333
       range_min: 0.45
       range_max: 8.0
       use_inf: true
       inf_epsilon: 1.0

       # Concurrency level, affects number of pointclouds queued for processing, thread number governed by nodelet manager
       # 0 : Detect number of cores
       # 1 : Single threaded
       # 2->inf : Parallelism level
       concurrency_level: 0
     </rosparam>
   </node>


  <!-- Map server -->
  <arg name="map_file" default="$(find navigation)/maps/EnvA.yaml"/>  <!--map_emptyhouse.yaml-->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

  <!-- AMCL -->
  <!--arg name="custom_amcl_launch_file" default="$(find navigation)/launch/includes/amcl/$(arg 3d_sensor)_amcl.launch.xml"/>
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>
  <arg name="scan_topic" default="/camera/scan"/>
  <include file="$(arg custom_amcl_launch_file)">
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include-->
  <node pkg="tf" type="static_transform_publisher" name="map_pub" args="0 0 0 0 0 0   /map /world  100"/>
  <!-- Move base -->
  <!-- <arg name="custom_param_file" default="$(find navigation)/param/dummy.yaml"/>
  <include file="$(find navigation)/launch/includes/move_base_gazebo.launch.xml">
    <arg name="custom_param_file" value="$(arg custom_param_file)"/>
  </include> -->

  <arg name="odom_frame_id"   default="world"/>   <!--arg name="odom_frame_id"   default="odom"/-->
  <arg name="base_frame_id"   default="base_link"/>   <!--arg name="base_frame_id"   default="base_footprint"/-->
  <arg name="global_frame_id" default="map"/>
  <arg name="odom_topic" default="/ground_truth/state" /> <!--arg name="odom_topic" default="ORB_SLAM2/pose" /-->
  <arg name="laser_topic" default="/camera/scan" />
  <arg name="custom_param_file" default="$(find navigation)/param/dummy.yaml"/>

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find navigation)/param/costmap_common_params_gazebo.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find navigation)/param/costmap_common_params_gazebo.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find navigation)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find navigation)/param/global_costmap_params_gazebo.yaml" command="load" />
    <rosparam file="$(find navigation)/param/dwa_local_planner_params_gazebo.yaml" command="load" />
    <rosparam file="$(find navigation)/param/move_base_params.yaml" command="load" />
    <rosparam file="$(find navigation)/param/global_planner_params.yaml" command="load" />
    <rosparam file="$(find navigation)/param/navfn_global_planner_params.yaml" command="load" />
    <!-- external params file that could be loaded into the move_base namespace -->
    <!-- <rosparam file="$(arg custom_param_file)" command="load" /> -->

    <!-- added to find the scan height wich the costamp is filled by the planner -->
    <!--param name="/local_costmap/obstacle_layer/origin_z" value="1.287" />
    <param name="/global_costmap/obstacle_layer/origin_z" value="1.287" /-->

    <!-- reset frame_id parameters using user input data -->
    <param name="global_costmap/global_frame" value="$(arg global_frame_id)"/>
    <param name="global_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
    <param name="local_costmap/global_frame" value="$(arg odom_frame_id)"/>
    <param name="local_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
    <param name="DWAPlannerROS/global_frame_id" value="$(arg odom_frame_id)"/>

    <remap from="cmd_vel" to="navigation_velocity_smoother/raw_cmd_vel"/>
    <remap from="odom" to="$(arg odom_topic)"/>
    <remap from="scan" to="$(arg laser_topic)"/>
    <!--remap from="move_base_simple/goal" to="goal"/-->
  </node>


   <!-- Include rviz navigation launch -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find navigation)/rviz/navigation_raspv.rviz" output="screen" />
   <!-- include file="$(find turtlebot_rviz_launchers)/launch/view_navigation.launch"/ -->

<!--node name="goal" pkg="rostopic" type="rostopic"
    args="pub goal geometry_msgs/PoseStamped
   '{header: {seq: auto, stamp: now, frame_id: 'map'},
    pose: {position: {x: 6.0, y: 0.0, z: 0.0}, orientation: {x: 0.0, y: 0.0, z: -0.70482373086, w: 0.709382483867}}}' -r 1">
 <remap from="goal" to="move_base_simple/goal"/>
</node-->
</launch>
